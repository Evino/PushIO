{"body":"![Push IO®](http://push.io/wp-content/uploads/2012/05/pushio_logo.png)\r\n\r\nCopyright © 2009 - 2012 Push IO LLC. All Rights Reserved.  \r\nPush IO® is a registered trademark in the United States. All other trademarks are the property of their respective owners.\r\n\r\n#### Software License Information\r\nThe use of any and all Push IO software regardless of release state is governed by the terms of a Software License Agreement and Terms of Use that are not included here but required by reference. \r\n\r\n#### Privacy Information\r\nThe use of Push IO services is subject to various privacy policies and restrictions on the use of end user information. For complete information please refer to your Master Agreement, our website privacy policies, and/or other related documents.\r\n\r\n#### Billing\r\nFor information on your account and billing, please contact sales@push.io\r\n\r\n#### Contact Info\r\nPush IO  \r\n1035 Pearl Street, Suite 400  \r\nBoulder, CO 80302 USA  \r\n303-335-0903  \r\n[support@push.io](mailto:support@push.io)  \r\n[www.push.io](http://www.push.io)   \r\n\r\n## Preface\r\nPush IO is a leading provider of real-time push notification alerts and mobile data delivery.This document provides the necessary information to leverage Push IO for your mobile application. This document corresponds to the latest version of PushIOManager for iOS.\r\n\r\n## Definitions\r\n\r\n#### UUID  \r\nA unique identifier corresponding to a specific device that is used to register with the Push IO service.\r\n\r\n#### Category   \r\nA category defines a specific content type that your app has which users might \tbe interested in. For example, if your app is a sports app, a category may be a specific team. \r\n\r\n#### Audience   \r\nAn audience defines a group of users based on one or more categories or platforms. For example, you might make an audience out of all of the users who have registered to a category for a team in the Western Conference who are using your app on iOS.\r\n\r\n#### Test Device  \r\nA device specially registered with Push IO to help you troubleshoot, test, and preview push notifications. \r\n\r\n## App Integration\r\n\r\n#### Overview\r\nPush IO provides a lightweight PushIOManager library for each supported platform. \r\n\r\nThe library provides simple methods for registering so Push IO can send push notifications to a device via the platform gateway. The library also provides interfaces for segmenting your users into groups called categories. This allows you to send targeted push notifications only to those users who have expressed an interest in *bird watching*, and then perhaps only users who are interested in *robins*.\r\n\r\nPush IO is the only push notification provider which provides data that allows you to understand how push notification engagement leads your users to high-value actions like in-app purchases, premium content viewing, and more. The PushIOManager library provides a simple mechanism to capture this push conversion information, which is available to you via the [Push IO Manager](https://manage.push.io) dashboard.\r\n\r\n#### Integration Prerequisites\r\nBefore continuing, be sure you have what you need to integrate Push IO into your app.\r\n\r\n1. Sign Up for a Push IO account at [https://manage.push.io](https://manage.push.io)\r\n2. Download our Push IO Mobile Dashboard app to easily send your first push!\r\n3. Setup your app and add an iOS platform at [https://manage.push.io](https://manage.push.io)\r\n4. Downloaded PushIOManager for iOS and pushio_config.json from [Set Up > iOS](https://manage.push.io)\r\n\r\n![Platform download](http://pushiocdn.s3.amazonaws.com/docs_assets/platformdetail.png)\r\n\r\nAll set? Now you’re ready to integrate Push IO into your app!\r\n\r\n## PushIOManager for iOS\r\n\r\nIn order to add the PushIOManager framework to your iOS application, follow these simple steps:\r\n\r\n* Locate the two files you downloaded from Set Up > [platform] from the Push IO Manager dashboard.\r\n\r\n![Downloads](http://pushiocdn.s3.amazonaws.com/docs_assets/files.png)\r\n\r\n* Drag the PushIOManager.framework bundle into your project. Be sure to click “Copy items into destination group’s folder”\r\n\r\n![Copy items dialogue](http://pushiocdn.s3.amazonaws.com/docs_assets/copyitems.png)\r\n\r\n* Drag pushio_config.json file to your project. A great location is in the same place your AppDelegate class is stored.  \r\n\r\n> The pushio_config.json must be in your application bundle in order for the PushIOManager read your API key and properly connect to the backend service.\r\n\r\n* Import the PushIOManager header file in your AppDelegate.h\r\n\r\n```objc\r\n#import <PushIOManager/PushIOManager.h>\r\n```\r\n\r\n* Declare the PushIOManagerDelegate in your app your AppDelegate.h\r\n\r\n```objc\r\n@interface AppDelegate : UIResponder <UIApplicationDelegate, PushIOManagerDelegate>\r\n```\r\n\r\n* Integrate the PushIOManager into your application lifecycle in AppDelegate.m\r\n\r\n```objc\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n    // Initial setup\r\n    [[PushIOManager sharedInstance] setDelegate:self];\r\n    [[PushIOManager sharedInstance] didFinishLaunchingWithOptions:launchOptions];\r\n\r\n    // Requests a device token from Apple\r\n    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:UIRemoteNotificationTypeAlert     | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\r\n}\r\n```\r\n\r\n* Implement the Apple Push Notification Service callbacks\r\n\r\n```objc\r\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:    \r\n(NSData *)deviceToken\r\n{\r\n    [[PushIOManager sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\r\n{\r\n    [[PushIOManager sharedInstance] didFailToRegisterForRemoteNotificationsWithError:error];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\r\n{\r\n    [[PushIOManager sharedInstance] didReceiveRemoteNotification:userInfo];\r\n}\r\n```\r\n\r\n* Implement PushIOManager delegate protocol \r\n\r\n```objc\r\n(void)readyForRegistration\r\n{\r\n   // If this method is called back, PushIOManager has a proper device token\r\n   // so now you are ready to register.\r\n}\r\n\r\n(void)registrationSucceeded\r\n{\r\n   // Push IO registration was successful\r\n}\r\n\r\n(void)registrationFailedWithError:(NSError *)error statusCode:(int)statusCode\r\n{\r\n   // Push IO registration failed\r\n}\r\n```\r\n\r\n* Register with Push IO\r\nYou can register a device with Push IO in at least two ways. First, if your application gives users a way to specify a preference or favorite, you may want to register for that category so that you can you push to them relevant content.\r\n\r\nThis kind of registration would be tied to a UI action, such as a UISwitch on/off action.\r\n\r\n![UISwitch registration](http://pushiocdn.s3.amazonaws.com/docs_assets/switches.png)\r\n\r\n```objc\r\n\r\n- (IBAction)switchAction:(id)sender\r\n{\r\n     UISwitch *mySwitch = (UISwitch *)sender;\r\n\r\n     if (mySwitch.on == YES)\r\n     {\r\n        // Register for US Headlines\r\n        [[PushIOManager sharedInstance] registerCategory:@\"US\"];\r\n     }\r\n     else\r\n     {\r\n        // Unregister for US Headlines\r\n        [[PushIOManager sharedInstance] unregisterCategory:@\"US\"];\r\n      }\r\n}\r\n```\r\n\r\nIf you just want to be able to broadcast to all your users at once, you can register more generically.\r\n\r\n```objc\r\n// Register device, so broadcasts can be sent to the user.\r\n[[PushIOManager sharedInstance] registerWithPushIO];\r\n\r\n// Unregister device entirely from Push IO.\r\n[[PushIOManager sharedInstance] unregisterWithPushIO];\r\n```\r\n\r\nYou can ask PushIOManager if a category is registered, to help configure your UI.\r\n\r\n```objc\r\n- (void)viewWillAppear\r\n{\r\n    [super viewWillAppear];\r\n    \r\n    // Set UI switches based upon Push IO registration status\r\n    _usSwitch.on = [[PushIOManager sharedInstance] isRegisteredForCategory:@\"US\"];\r\n    _sportsSwitch.on = [[PushIOManager sharedInstance] isRegisteredForCategory:@\"Sports\"];\r\n}\r\n```\r\n\r\nCongratulations, that's all there is to it! You should now be ready to test your iOS integration. Be sure to install an Ad-Hoc build of your app, as Push IO only supports Apple's Production APNS environment.\r\n\r\nIf you need further assistance, please visit our [support site](http://pushio.zendesk.com).","tagline":"iOS Integration Guide","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-16817212-1","name":"Push IO Manager"}