{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"iOS Integration Guide","name":"Push IO Manager","google":"UA-16817212-1","body":"![Push IO®](http://push.io/wp-content/uploads/2012/05/pushio_logo.png)\r\n\r\nCopyright © 2009 - 2012 Push IO LLC. All Rights Reserved.  \r\nPush IO® is a registered trademark in the United States. All other trademarks are the property of their respective owners.\r\n\r\n#### Software License Information\r\nThe use of any and all Push IO software regardless of release state is governed by the terms of a Software License Agreement and Terms of Use that are not included here but required by reference. \r\n\r\n#### Privacy Information\r\nThe use of Push IO services is subject to various privacy policies and restrictions on the use of end user information. For complete information please refer to your Master Agreement, our website privacy policies, and/or other related documents.\r\n\r\n#### Billing\r\nFor information on your account and billing, please contact sales@push.io\r\n\r\n#### Contact Info\r\nPush IO  \r\n1035 Pearl Street, Suite 400  \r\nBoulder, CO 80302 USA  \r\n303-335-0903  \r\n[support@push.io](mailto:support@push.io)  \r\n[www.push.io](http://www.push.io)   \r\n\r\n## Preface\r\nPush IO is a leading provider of real-time push notification alerts and mobile data delivery.This document provides the necessary information to leverage Push IO for your mobile application. This document corresponds to the latest version of PushIOManager for iOS.\r\n\r\n## Definitions\r\n\r\n#### UUID  \r\nA unique identifier corresponding to a specific device that is used to register with the Push IO service.\r\n\r\n#### Category   \r\nA category defines a specific content type that your app has which users might \tbe interested in. For example, if your app is a sports app, a category may be a specific team. \r\n\r\n#### Audience   \r\nAn audience defines a group of users based on one or more categories or platforms. For example, you might make an audience out of all of the users who have registered to a category for a team in the Western Conference who are using your app on iOS.\r\n\r\n#### Test Device  \r\nA device specially registered with Push IO to help you troubleshoot, test, and preview push notifications. \r\n\r\n## Getting Started with Push IO\r\n\r\nBefore you get started with integration of Push IO into your app code, you need to create an account and do a few setup steps via our web management dashboard.\r\n\r\n#### Sign Up\r\n\r\nTo create your account with Push IO, go to our [new user sign up](https://manage.push.io/auth/invitation/new) page. All it takes to get started is an email address, and confirmation that you agree to our [terms of service](http://www.push.io/legal/tos/), [privacy policy](http://www.push.io/legal/privacy/), and [services agreement](http://www.push.io/legal/agreement/).\r\n\r\n![Sign up](http://pushiocdn.s3.amazonaws.com/docs_assets/signup.png)\r\n\r\nAfter you click the \"Sign Up\" button, an activation email will be sent to you. Click the activation link found in the email and you will be directed to a page to continue the process by setting a password.\r\n\r\n![Welcome email](http://pushiocdn.s3.amazonaws.com/docs_assets/welcome_email.png)\r\n\r\n#### Welcome to Push IO\r\n\r\nAfter setting your password, account creation is complete. You will be directed to our new user welcome page. We built the welcome page has three simple steps. \r\n\r\n![Welcome page](http://pushiocdn.s3.amazonaws.com/docs_assets/welcome_page.png)\r\n\r\n1. Download the Push IO Mobile Dashboard for your mobile device\r\n2. Send yourself a Test Push\r\n3. Add your first app \r\n\r\nThe first two steps are very are very related. Without doing any integration, we want you to be able to send yourself a test push that shows our platform successfully delivering notifications to your device. In order to achieve this first push, we've published a Push IO Mobile Dashboard companion app on the [App Store](http://itunes.apple.com/us/app/push-io-mobile-dashboard/id547681215?mt=8), [Google Play](https://play.google.com/store/apps/details?id=com.pushio.dashboard), and the Windows Phone marketplace. \r\n\r\nOnce you install the Push IO Mobile Dashboard, sign in with the Push IO account you just created.\r\n\r\n![Mobile Dashboard sign in](http://pushiocdn.s3.amazonaws.com/docs_assets/mobiledashboard_signin.png)\r\n\r\nAfter you have signed in, you should see a status message in the app that says:\r\n\r\n> Ready to receive push notifications\r\n\r\nThis is your signal that it's time to have a little fun. You can send yourself a test push saying whatever you'd like. This message will only go to any device(s) you have installed the Mobile Dashboard and signed into your Push IO account.\r\n\r\n![Test Push](http://pushiocdn.s3.amazonaws.com/docs_assets/test_push.png)\r\n\r\nJust like that, you've sent yourself a Test Push via Push IO.\r\n\r\n![Test Push Received](http://pushiocdn.s3.amazonaws.com/docs_assets/first_push.png)\r\n\r\n> The Push IO Mobile Dashboard will also offer a list of your apps and some basic stats in your pocket. In the future, we'll be adding even more features so you can get the most out of Push IO even on the go.\r\n\r\n#### Setting Up Your App\r\n\r\nNext up, tell us the name of the first app you'd like to integrate with Push IO. In case you're wondering, you can also add more apps in the future. This step is just to get the first app created in our system.\r\n\r\n![Add an App](http://pushiocdn.s3.amazonaws.com/docs_assets/first_app_news.png)\r\n\r\n#### Configure an iOS Platform\r\n\r\nAfter creating your app, you are navigated to our primary management interface. There are three main taps at the top:\r\n\r\n* Push\r\n* Analytics\r\n* Set Up\r\n\r\nWe'll start out in the Set Up section, where \"+ Add Platform\" is selected in the sidebar on the left. Push IO communicates with iOS, Android, and Windows Phone devices a little bit differently. In order to push to each platform, there are some platform-specific setup steps.\r\n\r\n![Add a Platform](http://pushiocdn.s3.amazonaws.com/docs_assets/add_plat.png)\r\n\r\nFor the purpose of this guide, we'll cover setting up an iOS platform. You can follow a similar process for Android and Windows Phone, which is covered in those platforms' integration guides.\r\n\r\nTo add an iOS platform, go ahead and click the iOS button. You will be shown a simple iOS setup screen, where you need to upload a .pem file, which is required by Apple so we can send push notifications to your app.\r\n\r\n![Add a Platform iOS](http://pushiocdn.s3.amazonaws.com/docs_assets/add_plat_ios.png)\r\n\r\n#### The .pem File\r\n\r\nThe .pem file may also be referred to as a Production Push SSL certificate. It is created via Apple's iOS Provisioning Portal. This process can be a bit tricky, so we have an article on [generating the pem file] (https://pushio.zendesk.com/entries/21644287-generating-a-pem-file-for-ios).\r\n\r\nAfter you've generated the .pem file per that document, click the \"Choose File\" button to select and upload to Push IO. \r\n\r\n> Now would also be a good time to re-generate your Ad-Hoc Provisioning Profile so that your app will be push enabled the next time you do an Ad-Hoc build. To send push notifications to iOS devices via Push IO, you must be running an Ad-Hoc or App Store build. We do not support sending to Development builds at this time.\r\n\r\n#### Download the PushIOManager for iOS\r\n\r\nYou're now very close to integration Push IO with your iOS project. First, you need to download our iOS PushIOManager and a configuration file called pushio_config.json. Both downloads are available from the Set Up section of the management dashboard, under your iOS platform page.\r\n\r\n![Platform download](http://pushiocdn.s3.amazonaws.com/docs_assets/platformdetail.png)\r\n\r\n## App Integration\r\n\r\n#### Overview\r\nPush IO provides a lightweight PushIOManager library for each supported platform. \r\n\r\nThe library provides simple methods for registering so Push IO can send push notifications to a device via the platform gateway. The library also provides interfaces for segmenting your users into groups called categories. This allows you to send targeted push notifications only to those users who have expressed an interest in *bird watching*, and then perhaps only users who are interested in *robins*.\r\n\r\nPush IO is the only push notification provider which provides data that allows you to understand how push notification engagement leads your users to high-value actions like in-app purchases, premium content viewing, and more. The PushIOManager library provides a simple mechanism to capture this push conversion information, which is available to you via the [Push IO Manager](https://manage.push.io) dashboard.\r\n\r\nAll set? Now you’re ready to integrate Push IO into your app!\r\n\r\n## PushIOManager for iOS\r\n\r\nIn order to add the PushIOManager framework to your iOS application, follow these simple steps:\r\n\r\n* Locate the two files you downloaded from Set Up > [platform] from the Push IO Manager dashboard.\r\n\r\n![Downloads](http://pushiocdn.s3.amazonaws.com/docs_assets/files.png)\r\n\r\n* Drag the PushIOManager.framework bundle into your project. Be sure to click “Copy items into destination group’s folder”\r\n\r\n![Copy items dialogue](http://pushiocdn.s3.amazonaws.com/docs_assets/copyitems.png)\r\n\r\n* Drag pushio_config.json file to your project. A great location is in the same place your AppDelegate class is stored.  \r\n\r\n> The pushio_config.json must be in your application bundle in order for the PushIOManager read your API key and properly connect to the backend service.\r\n\r\n* Import the PushIOManager header file in your AppDelegate.h\r\n\r\n```objc\r\n#import <PushIOManager/PushIOManager.h>\r\n```\r\n\r\n* Declare the PushIOManagerDelegate in your app your AppDelegate.h\r\n\r\n```objc\r\n@interface AppDelegate : UIResponder <UIApplicationDelegate, PushIOManagerDelegate>\r\n```\r\n\r\n* Integrate the PushIOManager into your application lifecycle in AppDelegate.m\r\n\r\n```objc\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n    // Initial setup\r\n    [[PushIOManager sharedInstance] setDelegate:self];\r\n    [[PushIOManager sharedInstance] didFinishLaunchingWithOptions:launchOptions];\r\n\r\n    // Requests a device token from Apple\r\n    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:UIRemoteNotificationTypeAlert     | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\r\n}\r\n```\r\n\r\n* Implement the Apple Push Notification Service callbacks\r\n\r\n```objc\r\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:    \r\n(NSData *)deviceToken\r\n{\r\n    [[PushIOManager sharedInstance] didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\r\n{\r\n    [[PushIOManager sharedInstance] didFailToRegisterForRemoteNotificationsWithError:error];\r\n}\r\n\r\n- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\r\n{\r\n    [[PushIOManager sharedInstance] didReceiveRemoteNotification:userInfo];\r\n}\r\n```\r\n\r\n* Implement PushIOManager delegate protocol \r\n\r\n```objc\r\n(void)readyForRegistration\r\n{\r\n   // If this method is called back, PushIOManager has a proper device token\r\n   // so now you are ready to register.\r\n}\r\n\r\n(void)registrationSucceeded\r\n{\r\n   // Push IO registration was successful\r\n}\r\n\r\n(void)registrationFailedWithError:(NSError *)error statusCode:(int)statusCode\r\n{\r\n   // Push IO registration failed\r\n}\r\n```\r\n\r\n* Register with Push IO\r\nYou can register a device with Push IO in at least two ways. First, if your application gives users a way to specify a preference or favorite, you may want to register for that category so that you can you push to them relevant content.\r\n\r\nThis kind of registration would be tied to a UI action, such as a UISwitch on/off action.\r\n\r\n![UISwitch registration](http://pushiocdn.s3.amazonaws.com/docs_assets/switches.png)\r\n\r\n```objc\r\n\r\n- (IBAction)switchAction:(id)sender\r\n{\r\n     UISwitch *mySwitch = (UISwitch *)sender;\r\n\r\n     if (mySwitch.on == YES)\r\n     {\r\n        // Register for US Headlines\r\n        [[PushIOManager sharedInstance] registerCategory:@\"US\"];\r\n     }\r\n     else\r\n     {\r\n        // Unregister for US Headlines\r\n        [[PushIOManager sharedInstance] unregisterCategory:@\"US\"];\r\n      }\r\n}\r\n```\r\n\r\nIf you just want to be able to broadcast to all your users at once, you can register more generically.\r\n\r\n```objc\r\n// Register device, so broadcasts can be sent to the user.\r\n[[PushIOManager sharedInstance] registerWithPushIO];\r\n\r\n// Unregister device entirely from Push IO.\r\n[[PushIOManager sharedInstance] unregisterWithPushIO];\r\n```\r\n\r\nYou can ask PushIOManager if a category is registered, to help configure your UI.\r\n\r\n```objc\r\n- (void)viewWillAppear\r\n{\r\n    [super viewWillAppear];\r\n    \r\n    // Set UI switches based upon Push IO registration status\r\n    _usSwitch.on = [[PushIOManager sharedInstance] isRegisteredForCategory:@\"US\"];\r\n    _sportsSwitch.on = [[PushIOManager sharedInstance] isRegisteredForCategory:@\"Sports\"];\r\n}\r\n```\r\n\r\n#### Newsstand Integration\r\n\r\nIf your app is a Newsstand app, you need a few extra items in your App Delegate. These additions ensure that your app will receive special Newsstand notifications to trigger new content background downloads.\r\n\r\n```\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n    [[PushIOManager sharedInstance] setDelegate:self];\r\n    [[PushIOManager sharedInstance] didFinishLaunchingWithOptions:launchOptions];\r\n    \r\n    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeBadge|UIRemoteNotificationTypeSound|<b>UIRemoteNotificationTypeNewsstandContentAvailability</b>];\r\n    \r\n    // If set during testing, Apple will not enforce the one-update-per-24-hours push notification for content updates. \r\n    // IMPORTANT: If you keep this code in your App Store submission build, your app WILL be rejected.\r\n\r\n    [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@\"NKDontThrottleNewsstandContentNotifications\"];\r\n    \r\n    return YES;\r\n}\r\n```\r\n\r\nThe PushIOManager also supports an optional protocol method that gets called back when your app received a \"content-update\" push notification. In this method download your new content, which will happen in the background.\r\n\r\n```\r\n- (void)newNewsstandContentAvailable\r\n{\r\n    // Download your content here.\r\n    NSLog(@\"Push IO new newstand content available\");\r\n}\r\n```\r\n\r\n#### Debugging PushIOManager\r\n\r\nPushIOManager supports several debug levels which control how verbose the library is when logging to the console. Setting a debug level may help troubleshoot. Available debug levels are:\r\n\r\n> PUSHIO_DEBUG_NONE   (default)  \r\n> PUSHIO_DEBUG_ERRORS_ONLY  \r\n> PUSHIO_DEBUG_ACTIVITY  \r\n> PUSHIO_DEBUG_VERBOSE  \r\n\r\nTo set a debug level, simply add a line like the following your in App Delegate:\r\n\r\n```\r\n    [[PushIOManager sharedInstance] setDebugLevel:PUSHIO_DEBUG_ERRORS_ONLY];\r\n```\r\n\r\n\r\nCongratulations, that's all there is to it! You should now be ready to test your iOS integration. Be sure to install an Ad-Hoc build of your app, as Push IO only supports Apple's Production APNS environment.\r\n\r\nIf you need further assistance, please visit our [support site](http://pushio.zendesk.com)."}